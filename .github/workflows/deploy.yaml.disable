name: Deploy React CSR
on:
  push:
    branches:
      - main
      - release
      - develop
      - feature/**
      - "!feature/wip/**"
  workflow_dispatch:
  pull_request:
    types:
      - opened

#env:
#  APP_VERSION: v1.0.0

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    container:
      image: node:22
    steps:
      - name: Echo env hello text
        run: |
          echo "ENV hello text: ${{ vars.HELLO_TEST }}"
      - name: Echo Secret api key
        run: |
          echo "Secret API Key: ${{ secrets.API_KEY }}"
      - name: Checkout code
        uses: actions/checkout@v5
#     - name: Setup Node.js
#      uses: actions/setup-node@v5
#      with:
#       node-version: 22
      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install
      - name: Run Build
        run: npm run build
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: ./dist

  prepare:
    name: Prepare TARGET_ENV
    runs-on: ubuntu-latest
    needs: build
    outputs:
      TARGET_ENV: ${{ steps.set-target.outputs.target }}
    steps:
      - name: Compute TARGET_ENV
        id: set-target
        run: |
          echo "Computing TARGET_ENV for ref: $GITHUB_REF_NAME"
          if [[ "$GITHUB_REF_NAME" == "main" ]]; then
            echo "target=PRD" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF_NAME" == "release" ]]; then
            echo "target=UAT" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF_NAME" == "develop" ]]; then
            echo "target=SIT" >> $GITHUB_OUTPUT
          else
            echo "target=" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build, prepare]

    # job นี้ทำงานเฉพาะเมื่อ prepare คืนค่า TARGET_ENV ที่ไม่ว่าง
    #if: needs.prepare.outputs.TARGET_ENV != ''

    env:
      TARGET_ENV: ${{ needs.prepare.outputs.TARGET_ENV }}

    environment:
      name: ${{ needs.prepare.outputs.TARGET_ENV }}

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts
          path: ./dist
      - name: Deploy to ${{ env.TARGET_ENV }}
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying to ${{ env.TARGET_ENV }}..."
          echo "Using variable LOWEST_APP_VERSION: ${{ vars.LOWEST_APP_VERSION }}"
          echo "Using secret REDIS_TOKEN: ${{ secrets.REDIS_TOKEN }}"




